package test

import (
	"context"
	"errors"
	"go-rest-api/initializers"
	"go-rest-api/services"
	"regexp"
	"testing"

	"github.com/DATA-DOG/go-sqlmock"
	"github.com/stretchr/testify/assert"
)

func TestGetInventory(t *testing.T) {
	gormDB, mock := setupMockDB()
	mockDatabase := &initializers.Database{DB: gormDB}
	infoService := services.NewInfoService(mockDatabase)

	userID := uint(1)

	// –û–∂–∏–¥–∞–Ω–∏–µ SQL-–∑–∞–ø—Ä–æ—Å–∞
	mock.ExpectQuery(regexp.QuoteMeta(`
		SELECT m.name AS type, COUNT(*) AS quantity
		FROM purchases p
		JOIN merches m ON p.merch_id = m.id
		WHERE p.employee_id = $1
		GROUP BY m.name`)).
		WithArgs(userID).
		WillReturnRows(sqlmock.NewRows([]string{"type", "quantity"}).
			AddRow("T-shirt", 2).
			AddRow("Mug", 1))

	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	inventory, err := infoService.GetInventory(context.Background(), userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	assert.NoError(t, err)
	assert.Len(t, inventory, 2)
	assert.Equal(t, "T-shirt", inventory[0].Type)
	assert.Equal(t, 2, inventory[0].Quantity)
	assert.Equal(t, "Mug", inventory[1].Type)
	assert.Equal(t, 1, inventory[1].Quantity)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ –º–æ–∫–∏ –≤—ã–∑–≤–∞–ª–∏—Å—å
	assert.NoError(t, mock.ExpectationsWereMet())
}

func TestGetTransactionHistory(t *testing.T) {
	gormDB, mock := setupMockDB()
	mockDatabase := &initializers.Database{DB: gormDB}
	infoService := services.NewInfoService(mockDatabase)

	userID := uint(1)

	//–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
	mock.ExpectQuery(regexp.QuoteMeta(`
		SELECT e.email AS user, t.amount
		FROM transactions t
		JOIN employees e ON t.sender_id = e.id
		WHERE t.receiver_id = $1`)).
		WithArgs(userID).
		WillReturnRows(sqlmock.NewRows([]string{"user", "amount"}).
			AddRow("alice@example.com", 100).
			AddRow("bob@example.com", 50))

	//–û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
	mock.ExpectQuery(regexp.QuoteMeta(`
		SELECT e.email AS user, t.amount
		FROM transactions t
		JOIN employees e ON t.receiver_id = e.id
		WHERE t.sender_id = $1`)).
		WithArgs(userID).
		WillReturnRows(sqlmock.NewRows([]string{"user", "amount"}).
			AddRow("charlie@example.com", 75))

	history, err := infoService.GetTransactionHistory(context.Background(), userID)

	assert.NoError(t, err)
	assert.Len(t, history.Received, 2)
	assert.Equal(t, "alice@example.com", history.Received[0].User)
	assert.Equal(t, 100, history.Received[0].Amount)
	assert.Equal(t, "bob@example.com", history.Received[1].User)
	assert.Equal(t, 50, history.Received[1].Amount)

	assert.Len(t, history.Sent, 1)
	assert.Equal(t, "charlie@example.com", history.Sent[0].User)
	assert.Equal(t, 75, history.Sent[0].Amount)

	assert.NoError(t, mock.ExpectationsWereMet())

}

//–¢–µ—Å—Ç –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è

func TestGetInventory_DBError(t *testing.T) {
	gormDB, mock := setupMockDB()
	mockDatabase := &initializers.Database{DB: gormDB}
	infoService := services.NewInfoService(mockDatabase)

	userID := uint(1)

	// –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –≤ SQL-–∑–∞–ø—Ä–æ—Å–µ
	mock.ExpectQuery(regexp.QuoteMeta(`
		SELECT m.name AS type, COUNT(*) AS quantity
		FROM purchases p
		JOIN merches m ON p.merch_id = m.id
		WHERE p.employee_id = $1
		GROUP BY m.name`)).
		WithArgs(userID).
		WillReturnError(errors.New("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"))

	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	inventory, err := infoService.GetInventory(context.Background(), userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	assert.Error(t, err)
	assert.Equal(t, "–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∏–Ω–≤–µ–Ω—Ç–∞—Ä—è", err.Error())
	assert.Nil(t, inventory)
}

//–¢–µ—Å—Ç –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç

func TestGetTransactionHistory_ReceivedError(t *testing.T) {
	gormDB, mock := setupMockDB()
	mockDatabase := &initializers.Database{DB: gormDB}
	infoService := services.NewInfoService(mockDatabase)

	userID := uint(1)

	// üîπ –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
	mock.ExpectQuery(regexp.QuoteMeta(`
		SELECT e.email AS user, t.amount
		FROM transactions t
		JOIN employees e ON t.sender_id = e.id
		WHERE t.receiver_id = $1`)).
		WithArgs(userID).
		WillReturnError(errors.New("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"))

	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	history, err := infoService.GetTransactionHistory(context.Background(), userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	assert.Error(t, err)
	assert.Equal(t, "–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç", err.Error())
	assert.Empty(t, history.Received)
	assert.Empty(t, history.Sent)
}

// –¢–µ—Å—Ç –Ω–∞ –æ—à–∏–±–∫—É –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
func TestGetTransactionHistory_SentError(t *testing.T) {
	gormDB, mock := setupMockDB()
	mockDatabase := &initializers.Database{DB: gormDB}
	infoService := services.NewInfoService(mockDatabase)

	userID := uint(1)

	// üîπ –û–∂–∏–¥–∞–Ω–∏–µ –∑–∞–≥—Ä—É–∑–∫–∏ –ø–æ–ª—É—á–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
	mock.ExpectQuery(regexp.QuoteMeta(`
		SELECT e.email AS user, t.amount
		FROM transactions t
		JOIN employees e ON t.sender_id = e.id
		WHERE t.receiver_id = $1`)).
		WithArgs(userID).
		WillReturnRows(sqlmock.NewRows([]string{"user", "amount"}).
			AddRow("alice@example.com", 100).
			AddRow("bob@example.com", 50))

	// üîπ –°–∏–º—É–ª—è—Ü–∏—è –æ—à–∏–±–∫–∏ –ø—Ä–∏ –∑–∞–≥—Ä—É–∑–∫–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç
	mock.ExpectQuery(regexp.QuoteMeta(`
		SELECT e.email AS user, t.amount
		FROM transactions t
		JOIN employees e ON t.receiver_id = e.id
		WHERE t.sender_id = $1`)).
		WithArgs(userID).
		WillReturnError(errors.New("–æ—à–∏–±–∫–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"))

	// –í—ã–∑—ã–≤–∞–µ–º —Ñ—É–Ω–∫—Ü–∏—é
	history, err := infoService.GetTransactionHistory(context.Background(), userID)

	// –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
	assert.Error(t, err)
	assert.Equal(t, "–æ—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã—Ö –º–æ–Ω–µ—Ç", err.Error())
	assert.Len(t, history.Received, 2) // –ü–æ–ª—É—á–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –∑–∞–≥—Ä—É–∂–µ–Ω—ã
	assert.Empty(t, history.Sent)      // –û—Ç–ø—Ä–∞–≤–ª–µ–Ω–Ω—ã–µ –º–æ–Ω–µ—Ç—ã –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω—ã
}
