package test

import (
	"context"
	"net/http"
	"net/http/httptest"
	"strconv"
	"testing"

	"go-rest-api/initializers"
	models "go-rest-api/modules"
	"go-rest-api/services"

	"github.com/gin-gonic/gin"
	"github.com/stretchr/testify/assert"
	"gorm.io/driver/sqlite"
	"gorm.io/gorm"
)

// –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î –≤ –ø–∞–º—è—Ç–∏
func setupTestDB() *initializers.Database {
	db, err := gorm.Open(sqlite.Open(":memory:"), &gorm.Config{})
	if err != nil {
		panic("–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ —Ç–µ—Å—Ç–æ–≤–æ–π –ë–î")
	}

	testDB := &initializers.Database{DB: db}

	// –°–æ–∑–¥–∞—ë–º —Ç–∞–±–ª–∏—Ü—ã
	db.AutoMigrate(&models.Employee{}, &models.Merch{}, &models.Purchase{})

	// –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ
	db.Create(&models.Employee{ID: 1, Email: "test@example.com", Balance: 1000})
	db.Create(&models.Merch{ID: 1, Name: "T-shirt", Price: 500})

	return testDB
}

func TestBuyItem_E2E(t *testing.T) {
	gin.SetMode(gin.TestMode) // üîπ –û—Ç–∫–ª—é—á–∞–µ–º –ª–∏—à–Ω–∏–µ –ª–æ–≥–∏

	testDB := setupTestDB()                                // üîπ –°–æ–∑–¥–∞—ë–º —Ç–µ—Å—Ç–æ–≤—É—é –ë–î
	purchaseService := services.NewPurchaseService(testDB) // üîπ –°–æ–∑–¥–∞—ë–º —Å–µ—Ä–≤–∏—Å –ø–æ–∫—É–ø–∫–∏

	router := gin.Default()
	router.POST("/api/buy/:merch_id", func(c *gin.Context) {
		// üîπ –°–∏–º—É–ª–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω–Ω–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
		user := models.Employee{ID: 1, Balance: 1000}
		c.Set("user", user)

		merchID, err := strconv.Atoi(c.Param("merch_id"))
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": "Invalid merch_id"})
			return
		}

		//  –ó–∞–ø—É—Å–∫–∞–µ–º –ø–æ–∫—É–ø–∫—É
		newBalance, err := purchaseService.BuyItem(context.Background(), user, int(merchID))
		if err != nil {
			c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
			return
		}

		//  –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
		c.JSON(http.StatusOK, gin.H{
			"message":     "Purchase successful",
			"new_balance": newBalance,
		})
	})

	//  –°–æ–∑–¥–∞—ë–º HTTP-–∑–∞–ø—Ä–æ—Å (–ø–æ–∫—É–ø–∫–∞ —Ç–æ–≤–∞—Ä–∞ —Å ID 1)
	req, _ := http.NewRequest("POST", "/api/buy/1", nil)
	w := httptest.NewRecorder()
	router.ServeHTTP(w, req)

	//  –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç
	assert.Equal(t, http.StatusOK, w.Code)
	assert.Contains(t, w.Body.String(), "Purchase successful")
	assert.Contains(t, w.Body.String(), `"new_balance":500`)
}
